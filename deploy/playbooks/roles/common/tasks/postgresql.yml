---
- name: ensure database service is up
  service:
    name: postgresql
    state: started
  become: true

- name: generate pseudo-random password for the postgres {{ app_name }} user
  local_action: shell python3 -c "exec('import os,base64; print(base64.b64encode(os.urandom(30))[:${length}].decode())')" | tee {{ playbook_dir }}/tmp/app_user_password
  register: generated_app_user_password
  changed_when: false
  when: "'postgresql_master' in group_names"

- name: read pseudo-random password for the postgres {{ app_name }} user if it exists
  local_action: command cat {{ playbook_dir }}/tmp/app_user_password
  register: generated_app_user_password
  changed_when: false

- name: Make {{ app_name }} user
  postgresql_user:
    name: "{{ app_name }}"
    password: "{{ postgresql_app_user_password }}"
    role_attr_flags: "CREATEDB,LOGIN,NOSUPERUSER"
    state: "present"
    login_user: postgres
    db: "{{ app_name }}"
  become_user: postgres
  become: true
  when: "'postgresql_master' in group_names"

- name: Make {{ app_name }} database
  postgresql_db:
    name: "{{ app_name }}"
    owner: "{{ app_name }}"
    state: present
    login_user: postgres
  become_user: postgres
  become: true
  when: "'postgresql_master' in group_names"

- name: create the prod_db config file with the db password
  template:
    src: prod_db.py.j2
    dest: "{{ app_home }}/src/{{ app_name }}/prod_db.py"
  notify:
    - restart app

# this needs to be here because it needs the new db password
- name: create the prod alembic.ini file
  template:
    src: alembic-prod.ini.j2
    dest: "{{ app_home }}/src/{{ app_name }}/alembic-prod.ini"

- name: check if database for app needs populating
  # this should be configurable/optional in the playbook
  command: psql -t shaman -c "SELECT COUNT(*) FROM projects;"
  become_user: postgres
  become: true
  register: database_is_populated
  ignore_errors: true
  changed_when: "database_is_populated.rc != 0"
  when: "'postgresql_master' in group_names"

- name: populate the database for {{ app_name }}
  command: "{{ app_home }}/bin/pecan populate {{ app_home }}/src/{{ app_name }}/prod.py"
  environment:
    ALEMBIC_CONFIG: "{{ app_home }}/src/{{ app_name }}/alembic-prod.ini"
  when:
    - "'postgresql_master' in group_names"
    - "database_is_populated.rc == 1"
